
from meta_data import *
import matplotlib.pyplot as plt

def compare_plot2(mean_lists, std_lists, traina_num, method, target, save_path, raw_size, title_data_name, legends=None, y_name="RMSE"):
    # Create a figure for plotting
    plt.figure("compare_{}_{}".format(mean_lists, std_lists))
    plt.axhline(y=mean_lists[0][0], color='r', linestyle='-')
    
    # Define x-axis values
    x_axis = [x*0.2 for x in range(traina_num + 1)]
    
    # Check if legends list is provided and has the correct length
    if legends and len(legends) != len(mean_lists):
        raise ValueError("Length of legends list must be equal to the number of data sets (mean_lists)")
    
    # Define a list of markers
    markers = ['o', 's', 'D', '*', '^', 'v', '<', '>', 'p', 'h']
    
    # Ensure there are enough markers, cycle if not
    if len(markers) < len(mean_lists):
        markers = markers * (len(mean_lists) // len(markers) + 1)
    
    # Plot each set of means and standard deviations
    for idx, (mean_list, std_list) in enumerate(zip(mean_lists, std_lists)):
        label = legends[idx] if legends else f"Data Set {idx+1}"
        marker = markers[idx % len(markers)]  # Select marker
        
        if std_list is not None:
            # If standard deviation data is available, plot with error bars
            plt.errorbar(x_axis, mean_list, yerr=std_list, fmt='-', marker=marker, capsize=5, label=label)
        else:
            # If no standard deviation data, plot a simple line with markers
            plt.plot(x_axis, mean_list, '-' + marker, label=label)
    
    # Set labels and title
    plt.xlabel('syn/raw')
    plt.ylabel(y_name)
    plt.title(f"{title_data_name}: {method} error on {target}, raw size {raw_size}")
    
    # Display legend
    plt.legend()
    
    plt.grid(axis='y', linestyle='--')
    
    # Save the figure
    plt.savefig(save_path)
    print(save_path)


if __name__ == "__main__":
    
    control_ls = {0: "imbalanced", 1: "spurious_minor", 2: "spurious_overall", 3: "spurious_major", 4: "spurious_worst"}
    
    data_name_ls = {0: "openmlDiabetes", 1: "gender", 2: "heart_failure"}
    
    method_ls = {0: "logistic", 1: "catBoost", 2: "randomForest"}
    
    title_data_name_ls = {"openmlDiabetes": "Diabetes", "gender": "Gender", "heart_failure": "HeartFailure"}
    
    control = control_ls[0]
    data_name = data_name_ls[2]
    title_data_name = title_data_name_ls[data_name]
    method = method_ls[0]
    
    
    info = info_dict[data_name]
    target = info["target"]
    metric = info["metric"]
    raw_size = info["raw_size"]
    
    # for control in control_ls.values():
    for control in [control_ls[0]]:
        for data_name in data_name_ls.values():
            if control in ["spurious_minor", "spurious_overall", "spurious_major", "spurious_worst"] and data_name == "gender":
                continue
            
            title_data_name = title_data_name_ls[data_name]
            info = info_dict[data_name]
            target = info["target"]
            metric = info["metric"]
            raw_size = info["raw_size"]
    
            # imbalanced, imbalanced_smote, imbalanced_duplicate
            if control == "imbalanced":
                # method = "random forest"
                legends = ["GPT", "Smote", "Duplicate"]
                traina_num = 5
                
                for method in method_ls.values():
                    save_path = "./my_plots/imbalanced_compare_{}_{}.png".format(data_name, method)
                    if data_name == "openmlDiabetes":
                        
                        if method == "logistic":
                            mean_lists = [
                                [0.47400000000000003, 0.41100000000000003, 0.3630000000000001, 0.347, 0.34199999999999997, 0.322],
                                [0.47400000000000003, 0.367, 0.33899999999999997, 0.32999999999999996, 0.312, 0.30700000000000005],
                                [0.47400000000000003, 0.438, 0.42700000000000005, 0.40499999999999997, 0.40499999999999997, 0.3950000000000001]
                            ]
                            
                            std_lists = [
                                [0.04144273157020419, 0.0465564173879391, 0.03684426685388107, 0.021965882636488816, 0.016431676725154998, 0.021095023109728946],
                                [0.04144273157020419, 0.03213253802611929, 0.0354259791678367, 0.031024184114977114, 0.03492849839314594, 0.03801315561749641],
                                [0.04144273157020419, 0.0480364444979018, 0.05438290172471491, 0.06051859218455103, 0.07516648189186453, 0.0735696948478108]
                            ]
                            
                        if method == "catBoost":
                            mean_lists = [
                                [0.5269999999999999, 0.42800000000000005, 0.391, 0.372, 0.353, 0.33399999999999996],
                                [0.5269999999999999, 0.472, 0.453, 0.446, 0.43699999999999994, 0.43500000000000005],
                                [0.5269999999999999, 0.513, 0.514, 0.51, 0.51, 0.495]
                            ]
                            
                            std_lists = [
                                [0.02307596151842863, 0.04086563348340509, 0.019170289512680832, 0.014832396974191338, 0.018907670401189056, 0.017102631376487046],
                                [0.02307596151842863, 0.043243496620879306, 0.05392123885817164, 0.05683308895353128, 0.05529466520379701, 0.045276925690687066],
                                [0.02307596151842863, 0.027064737205448705, 0.02945335295004628, 0.034460121880225555, 0.031024184114977135, 0.02738612787525833]
                            ]
                            
                        if method == "randomForest":
                            mean_lists = [
                                [0.541, 0.43200000000000005, 0.391, 0.377, 0.358, 0.33699999999999997],
                                [0.541, 0.489, 0.46799999999999997, 0.45899999999999996, 0.45200000000000007, 0.45199999999999996],
                                [0.541, 0.5149999999999999, 0.517, 0.5189999999999999, 0.525, 0.5189999999999999]
                            ]
                            
                            std_lists = [
                                [0.040527768258318914, 0.026124700955226236, 0.019811612756158968, 0.01923538406167136, 0.027748873851023242, 0.02018662923818633],
                                [0.040527768258318914, 0.056833088953531244, 0.07529940238806677, 0.08042076846188428, 0.08136338242723198, 0.07181573643707903],
                                [0.040527768258318914, 0.03984344362627307, 0.05215361924162118, 0.038955102361564936, 0.027156951228000544, 0.02484954727957832]
                            ]
                        # mean_lists = [
                            
                        #     [0.541, 0.43200000000000005, 0.391, 0.377, 0.358, 0.33699999999999997],
                            
                        #     [0.541, 0.46499999999999997, 0.469, 0.4720000000000001, 0.47400000000000003, 0.469],
                            
                        #     [0.541, 0.5149999999999999, 0.517, 0.5189999999999999, 0.525, 0.5189999999999999]
                        # ]
                        
                        # std_lists = [
                            
                        #     [0.040527768258318914, 0.026124700955226236, 0.019811612756158968, 0.01923538406167136, 0.027748873851023242, 0.02018662923818633],
                            
                        #     [0.040527768258318914, 0.016955824957813188, 0.02987473849257931, 0.04590751572455212, 0.05920304046246272, 0.058245171473693826],
                            
                        #     [0.040527768258318914, 0.03984344362627307, 0.05215361924162118, 0.038955102361564936, 0.027156951228000544, 0.02484954727957832]
                        # ]
                        
                    if data_name == "heart_failure":
                        
                        if method == "logistic":
                            
                            mean_lists = [
                                [0.46399999999999997, 0.40800000000000003, 0.38999999999999996, 0.396, 0.388, 0.37],
                                [0.46399999999999997, 0.43800000000000006, 0.42400000000000004, 0.41600000000000004, 0.396, 0.388],
                                [0.46399999999999997, 0.4640000000000001, 0.43999999999999995, 0.43000000000000005, 0.43200000000000005, 0.42800000000000005]
                            ]
                            
                            std_lists = [
                                [0.051768716422179145, 0.059329587896765304, 0.050990195135927834, 0.05412947441089744, 0.06572670690061992, 0.055677643628300195],
                                [0.051768716422179145, 0.01643167672515494, 0.030495901363953783, 0.028809720581775836, 0.03847076812334269, 0.03898717737923589],
                                [0.051768716422179145, 0.04615192303685729, 0.015811388300841858, 0.012247448713915856, 0.016431676725154942, 0.01643167672515494]
                            ]
                        
                        if method == "catBoost":
                            
                            mean_lists = [
                                [0.536, 0.45600000000000007, 0.41600000000000004, 0.418, 0.388, 0.386],
                                [0.536, 0.48, 0.46399999999999997, 0.458, 0.44200000000000006, 0.43600000000000005],
                                [0.536, 0.5440000000000002, 0.526, 0.518, 0.5080000000000001, 0.518]
                            ]
                            
                            std_lists = [
                                [0.052249401910452575, 0.10502380682492898, 0.07368853370776218, 0.06534523701081817, 0.07120393247567162, 0.07536577472566706],
                                [0.052249401910452575, 0.05147815070493502, 0.055045435778091525, 0.05540758070878026, 0.04969909455915669, 0.073348483283569],
                                [0.052249401910452575, 0.07092249290598861, 0.08677557259966658, 0.06906518659932802, 0.06797058187186573, 0.058906705900092615]
                            ]
                            
                            
                        if method == "randomForest":
                            
                            mean_lists = [
                                [0.6040000000000001, 0.524, 0.4640000000000001, 0.43400000000000005, 0.4039999999999999, 0.39399999999999996],
                                [0.6040000000000001, 0.516, 0.47800000000000004, 0.47000000000000003, 0.4600000000000001, 0.466],
                                [0.6040000000000001, 0.5820000000000001, 0.5740000000000001, 0.5660000000000001, 0.5599999999999999, 0.544]
                            ]
                            
                            std_lists = [
                                [0.07668115805072324, 0.08234075540095565, 0.06655824516917495, 0.04774934554525328, 0.07569676347110225, 0.068044103344816],
                                [0.07668115805072324, 0.07700649323271386, 0.0834865258589672, 0.07968688725254616, 0.06164414002968977, 0.0723187389270582],
                                [0.07668115805072324, 0.06610597552415365, 0.05549774770204645, 0.06308724118235003, 0.06999999999999998, 0.06024948132556829]
                            ]
                        # mean_lists = [
                            
                        #     [0.6040000000000001, 0.524, 0.4640000000000001, 0.43400000000000005, 0.4039999999999999, 0.39399999999999996],
                            
                        #     [0.6040000000000001, 0.518, 0.4680000000000001, 0.48200000000000004, 0.462, 0.47000000000000003],
                            
                        #     [0.6040000000000001, 0.5820000000000001, 0.5740000000000001, 0.5660000000000001, 0.5599999999999999, 0.544]
                        # ]
                        
                        # std_lists = [
                            
                        #     [0.07668115805072324, 0.08234075540095565, 0.06655824516917495, 0.04774934554525328, 0.07569676347110225, 0.068044103344816],
                            
                        #     [0.07668115805072324, 0.045497252664309346, 0.09093954035511728, 0.06496152707564688, 0.07949842765740718, 0.079372539331937],
                            
                        #     [0.07668115805072324, 0.06610597552415365, 0.05549774770204645, 0.06308724118235003, 0.06999999999999998, 0.06024948132556829]
                        # ]
                        
                    if data_name == "gender":
                        
                        if method == "logistic":
                            
                            mean_lists = [
                                [0.1284, 0.11599999999999996, 0.1276, 0.12599999999999997, 0.12139999999999998, 0.11259999999999999],
                                [0.1284, 0.15139999999999998, 0.1356, 0.13299999999999998, 0.13179999999999997, 0.1316],
                                [0.1284, 0.1296, 0.12979999999999997, 0.12999999999999998, 0.13019999999999998, 0.13099999999999998]
                            ]
                            
                            std_lists = [
                                [0.06628951651656544, 0.05145872132107443, 0.0504509662940166, 0.06357279292275902, 0.05808011707977181, 0.04388963431153196],
                                [0.06628951651656544, 0.0781492162468697, 0.06719598202273706, 0.05988739433303139, 0.059679979892758014, 0.05919712830872795],
                                [0.06628951651656544, 0.06598711995533675, 0.0720950761148083, 0.07133372274037016, 0.0701548287717959, 0.06861486719363379]
                            ]
                            
                        if method == "catBoost":
                            
                            mean_lists = [
                                [0.11299999999999999, 0.10959999999999996, 0.11519999999999997, 0.12799999999999997, 0.12359999999999997, 0.10939999999999997],
                                [0.11299999999999999, 0.12119999999999997, 0.12099999999999997, 0.11599999999999996, 0.12319999999999998, 0.12199999999999997],
                                [0.11299999999999999, 0.10999999999999999, 0.10579999999999998, 0.10879999999999997, 0.10839999999999998, 0.1042]
                            ]
                            
                            std_lists = [
                                [0.06628951651656544, 0.05145872132107443, 0.0504509662940166, 0.06357279292275902, 0.05808011707977181, 0.04388963431153196],
                                [0.08449556201363478, 0.07375093219749837, 0.06491147818375423, 0.06658453273846714, 0.049042838417041074, 0.050941142507800116],
                                [0.08449556201363478, 0.08062567829172045, 0.08026643133963288, 0.07663354356937961, 0.07812361998781162, 0.07886190461813611]
                            ]
                            
                        if method == "randomForest":
                            
                            mean_lists = [
                                [0.11959999999999997, 0.10799999999999996, 0.11039999999999997, 0.11379999999999997, 0.11499999999999996, 0.11199999999999996],
                                [0.11959999999999997, 0.11559999999999997, 0.11579999999999997, 0.10939999999999997, 0.11459999999999997, 0.12119999999999997],
                                [0.11959999999999997, 0.11739999999999999, 0.1152, 0.11459999999999997, 0.11479999999999997, 0.11439999999999997]
                            ]
                            
                            std_lists = [
                                [0.06979828078111955, 0.05882601465338274, 0.05894319299121825, 0.06899420265500573, 0.0597954847793711, 0.06321787721839449],
                                [0.06979828078111955, 0.06807202068397854, 0.06021793752695289, 0.05864128238706927, 0.05159263513332111, 0.05020159360020357],
                                [0.06979828078111955, 0.07535117782755622, 0.06857988043150848, 0.06654547317436403, 0.06802720044217608, 0.0702303353259829]
                            ]
                        
                        # mean_lists = [
                            
                        #     [0.11959999999999997, 0.10799999999999996, 0.11039999999999997, 0.11379999999999997, 0.11499999999999996, 0.11199999999999996],
                            
                        #     [0.11959999999999997, 0.11039999999999998, 0.10839999999999997, 0.11139999999999997, 0.11879999999999998, 0.12499999999999997],
                            
                        #     [0.11959999999999997, 0.11739999999999999, 0.1152, 0.11459999999999997, 0.11479999999999997, 0.11439999999999997]
                        # ]
                        
                        # std_lists = [
                            
                        #     [0.06979828078111955, 0.05882601465338274, 0.05894319299121825, 0.06899420265500573, 0.0597954847793711, 0.06321787721839449],
                            
                        #     [0.06979828078111955, 0.07873245836375237, 0.06214740541647737, 0.052012498497957194, 0.0544352826758528, 0.05605354582896608],
                            
                        #     [0.06979828078111955, 0.07535117782755622, 0.06857988043150848, 0.06654547317436403, 0.06802720044217608, 0.0702303353259829]
                        # ]
                        
                    compare_plot2(mean_lists, std_lists, traina_num, method, target, save_path, raw_size, title_data_name, legends, y_name=metric)

                    
            if control == "spurious_minor":
                save_path = "./my_plots/spurious_minor_compare_{}.png".format(data_name)
                method = "logistic"
                legends = ["GPT", "Duplicate"]
                traina_num = 5
                
                if data_name == "openmlDiabetes":
                    mean_lists = [
                        
                        [0.6989567820688715, 0.5879706872352408, 0.4983037990114047, 0.45990860737118366, 0.4375489239841177, 0.42360119466839335],
                        
                        [0.6989567820688715, 0.6192559481569113, 0.5859457410003472, 0.520416847524136, 0.46969550239587843, 0.4376485967539729]
                        
                    ]
                    
                    std_lists = [
                        
                        [0.12080888051330542, 0.10683090566914662, 0.0695985663840294, 0.06509375334466089, 0.09557088794489713, 0.10377289363670024],
                        
                        [0.12080888051330542, 0.12984058081904865, 0.18088676827440092, 0.17140248886913043, 0.13853148005728427, 0.13884766432462498]
                        
                    ]
                    
                if data_name == "heart_failure":
                    mean_lists = [
                        
                        [0.495051861892202, 0.47234271698350805, 0.37168781929611777, 0.3589609507215137, 0.3301235134710772, 0.3294838346487286],
                        
                        [0.495051861892202, 0.48836989006446585, 0.4867632392217793, 0.4873734087133047, 0.48682168457537367, 0.4760420235584245]
                        
                    ]
                    
                    std_lists = [
                        
                        [0.06482025552823642, 0.07711280359874202, 0.05967493540587359, 0.05124270413809712, 0.04435038104796059, 0.057270868657097906],
                        
                        [0.06482025552823642, 0.09460829770741425, 0.08532270443592112, 0.07574872185072778, 0.08058776994533723, 0.07484157196379304]
                        
                    ]
                
                compare_plot2(mean_lists, std_lists, traina_num, method, target, save_path, raw_size, title_data_name, legends, y_name=metric)

            
            
            if control == "spurious_overall":
                save_path = "./my_plots/spurious_overall_compare_{}.png".format(data_name)
                method = "logistic"
                legends = ["GPT", "Duplicate"]
                traina_num = 5
                
                if data_name == "openmlDiabetes":
                    mean_lists = [
                        
                        [0.437, 0.38, 0.335, 0.316, 0.30999999999999994, 0.30500000000000005],
                        
                        [0.437, 0.404, 0.389, 0.368, 0.349, 0.33399999999999996]
                        
                    ]
                    
                    std_lists = [
                        
                        [0.057619441163551735, 0.06274950199005566, 0.03952847075210474, 0.040373258476372686, 0.05667892024377317, 0.05820223363411409],
                        
                        [0.057619441163551735, 0.07402702209328699, 0.09749358953285081, 0.08318653737234169, 0.072405110316883, 0.07048049375536469]
                        
                    ]
                    
                if data_name == "heart_failure":
                    mean_lists = [
                        
                        [0.31999999999999995, 0.314, 0.26599999999999996, 0.26599999999999996, 0.252, 0.256],
                        
                        [0.31999999999999995, 0.32, 0.336, 0.334, 0.336, 0.33399999999999996]
                        
                    ]
                    
                    std_lists = [
                        
                        [0.06284902544988268, 0.06730527468185536, 0.050793700396801165, 0.05128352561983233, 0.0449444101084885, 0.04098780306383843],
                        
                        [0.06284902544988268, 0.0744983221287567, 0.06465291950097847, 0.05941380311005179, 0.06767569726275452, 0.06268971207462992]
                        
                    ]
                    
                compare_plot2(mean_lists, std_lists, traina_num, method, target, save_path, raw_size, title_data_name, legends, y_name=metric)
                    
                
            if control == "spurious_major":
                save_path = "./my_plots/spurious_major_compare_{}.png".format(data_name)
                method = "logistic"
                legends = ["GPT", "Duplicate"]
                traina_num = 5
                if data_name == "openmlDiabetes":
                    mean_lists = [
                        [0.06034912802468713, 0.07923061165262109, 0.09828612132127165, 0.10872982231263999, 0.12557141756746348, 0.13246788148218297],
                        [0.06034912802468713, 0.09130056752672103, 0.1001898172863844, 0.1431948678840609, 0.1705185223964591, 0.1803128727384768]
                    ]
                    
                    std_lists = [
                        [0.060840250905512046, 0.048835596298545794, 0.05505919273823923, 0.048148204728779564, 0.05120143178845543, 0.0389892845290565],
                        [0.060840250905512046, 0.05951513713374623, 0.06101538819622449, 0.08451687592827617, 0.07843154440831679, 0.07096078789854897]
                    ]
                    
                if data_name == "heart_failure":
                    
                    mean_lists = [
                        [0.10141092384420938, 0.11296619210535994, 0.1304900016291695, 0.1497028920386166, 0.15354602929351854, 0.16129587294580122],
                        [0.10141092384420938, 0.11028897262469717, 0.15256434431183358, 0.14743613918362844, 0.15219804394553318, 0.16132624907373833]
                    ]
                    
                    std_lists = [
                        [0.03425443383917571, 0.030084056794834623, 0.05007342516276105, 0.052334995741376227, 0.03878795312819931, 0.043387162451742546],
                        [0.03425443383917571, 0.02936839666537056, 0.06614464747163452, 0.06190889416585965, 0.07088980779131676, 0.0693790711180943]
                    ]
                    
                compare_plot2(mean_lists, std_lists, traina_num, method, target, save_path, raw_size, title_data_name, legends, y_name=metric)

            
            
            if control == "spurious_worst":
                save_path = "./my_plots/spurious_worst_compare_{}.png".format(data_name)
                method = "logistic"
                legends = ["GPT", "Duplicate"]
                traina_num = 5
                if data_name == "openmlDiabetes":
                    mean_lists = [
                        [0.8998947368421053, 0.805573883161512, 0.6811578947368421, 0.6583508771929825, 0.624578947368421, 0.5829122807017544],
                        [0.8998947368421053, 0.74090902514017, 0.6924385964912281, 0.634, 0.6086585695006747, 0.5603774781919112]
                    ]
                    
                    std_lists = [
                        [0.10118658504122632, 0.20528836639245293, 0.16121401920332026, 0.1476458124503827, 0.14257193245832073, 0.1727179996030763],
                        [0.10118658504122632, 0.1534537833631452, 0.17792302709410415, 0.1805099539923068, 0.18216609559053867, 0.2176524319086964]
                    ]
                    
                if data_name == "heart_failure":
                    
                    mean_lists = [
                        [0.5387317814581626, 0.5708545078110295, 0.5201298701298701, 0.49004329004328995, 0.45519480519480515, 0.44186147186147184],
                        [0.5387317814581626, 0.533593441537214, 0.575095417821799, 0.577909596124699, 0.5769942643169188, 0.5761170713344625]
                    ]
                    
                    std_lists = [
                        [0.07139566742966702, 0.11610069272074662, 0.15589224847169908, 0.07169617326239337, 0.08923683563048783, 0.11364044519571652],
                        [0.07139566742966702, 0.08968264721676102, 0.11099581946618095, 0.10132355329275175, 0.10908751624148623, 0.110661243451152]
                    ]


                compare_plot2(mean_lists, std_lists, traina_num, method, target, save_path, raw_size, title_data_name, legends, y_name=metric)

